+function () {
  const cacheVersion = 'v0'
  const cacheName    = `${cacheVersion}:sw-cache-`

  self.addEventListener('install', async event => {
    event.waitUntil(
      caches.open(cacheName).then(cache => {
        return cache.addAll([
          '<%= Routes.static_path(@conn, "/js/app.js") %>',
          '<%= Routes.static_path(@conn, "/css/app.css") %>',
          '<%= Routes.pwa_path(@conn, :offline) %>'
        ])
      })
    )
  })

  self.addEventListener('activate', event => {
    event.waitUntil(
      caches.keys().then(cacheNames => {
        return Promise.all(
          cacheNames.filter(name =>
            name.indexOf(cacheVersion) !== 0
          ).map(name =>
            caches.delete(name)
          )
        )
      })
    )
  })

  self.addEventListener('fetch', event => {
    event.respondWith(
      fetch(event.request).catch(() => {
        return caches.match(event.request).then(response => {
          if (response) {
            return response
          }

          const serveOffline = event.request.mode === 'navigate' || (
            event.request.method === 'GET' &&
            event.request.headers.get('accept').includes('text/html')
          )

          if (serveOffline) {
            return caches.match('<%= Routes.pwa_path(@conn, :offline) %>')
          }
        })
      })
    )
  })

  self.addEventListener('push', event => {
    if (self.Notification?.permission !== 'granted') {
      return
    }

    const icon    = '<%= Routes.static_path(@conn, "/images/icons/192_notification.png") %>'
    const badge   = '<%= Routes.static_path(@conn, "/images/icons/96_monochrome.png") %>'
    const vibrate = [100, 200, 100]

    const {title, body, tag, lang, data, actions} = event.data.json()

    event.waitUntil(
      self.registration.showNotification(title, {body, icon, badge, tag, lang, data, vibrate, actions})
    )
  })

  self.addEventListener('notificationclick', event => {
    const notification = event.notification
    const path         = notification.data?.path || '/'

    notification.close()

    event.waitUntil(
      clients.matchAll({
        type: 'window'
      }).then(clientList => {
        for (const client in clientList) {
          if (client.url === path && 'focus' in client) {
            return client.focus()
          }
        }

        if (clients.openWindow) {
          return clients.openWindow(path)
        }
      })
    )
  })
}()
